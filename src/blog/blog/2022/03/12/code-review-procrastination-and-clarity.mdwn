[[!meta date="2022-03-12T23:52:02.682199"]]
[[!meta author="Tyler Cipriani"]]
[[!meta copyright="""
Copyright &copy; 2022 Tyler Cipriani
"""]]
[[!meta title="Code Review: Procrastination and Clarity"]]
[[!tag computing]]

> People think they lack motivation, what they really lack is clarity
>
> -- James Clear, <u>Atomic Habits</u>

There is no standard way to do a code review -- which makes putting it off
easy. Over time this can lead to a hefty backlog of overdue code changes
awaiting review.

Code review innocently asks a staggering question: "does this code look good to
you?" And If you find your code stuck waiting for review, it might be that your
reviewer doesn't even know where to begin.

## Where to even begin a code review

A thread on hacker news recently asked a fundamental question about code
review: [do you run the code as part of your
review](https://news.ycombinator.com/item?id=30577735)? The immediate responses
were illuminating to me, and I can summarize them as follows:

1. [No, but here's how I trick developers into running their own code](https://news.ycombinator.com/item?id=30578033)
2. [Yes, because neglecting to run code has left me traumatized](https://news.ycombinator.com/item?id=30577790)
3. [Rarely, because tests](https://news.ycombinator.com/item?id=30579389)
4. [It depends, and you need a standard](https://news.ycombinator.com/item?id=30578049)

Even Google's code review guidelines are blasé on the subject:

> You can validate the CL [code under review] if you want
>
> -- What to look for in a code review, https://google.github.io/eng-practices/review/

Google's engineering practices documentation goes on to mention times you'll
definitely want to ensure you've run the code: UI changes and parallelism —
places where it's easy (even likely) for an individual to make a noticeable (in
retrospect) mistake. But what about all the other code reviews?

This is something you have to decide while doing the review. **This ambiguity makes code review even slower.**

## Your code review request might be unreasonable

Your code reviewer might feel you're asking for something unreasonable -- to
vouch for your unbidden gob of code forever.

It's a big task to compare your code's design, complexity, safety, and
maintainability against every imaginable alternative. If that’s what you’re
asking, then you're asking for a lot of my time. And if your change is also
enormous and tricky, then you might be asking for too much of my time.

When a review demands too much of my time, I have a few options:

* **Lawful Good**: Spend a massive chunk of my day reviewing code
* **Neutral**: Not review your code — and devoutly wish that it somehow disappears.
* **Chaotic Evil**: YOLO it into production and let you deal with the fallout.

![The **chaotic evil** response to an unreasonable review request](https://photos.tylercipriani.com/2022-03-07_10loc-500loc.png)

None of these options is fair to both the developer and the reviewer.

## Requesting changes to the code review process

Large projects tend to have large backlogs of reviews. There are tricks
developers can use to cut through the noise:

* Split your merge request into smaller, independent merge requests
* Add some tests and linting to exercise the code
* Write clearer commit messages
* Add comments to the code
* Write better code

Large software projects tend to have developer productivity teams who create
tools to cajole developers into doing reviews -- Automattic has [The
Stick](https://www.software-engineering-unlocked.com/episode-4-leif-singer/),
and Microsoft has [Nudge](https://arxiv.org/pdf/2011.12468v1.pdf). And studies
have shown code review reminder tools like these may [speed up reviews by as much as 60%](https://www.michaelagreiler.com/code-review-reminder/).

But there are no magic bullets. Code review's harshest feedback is silence.
There are times when you gape as your code is passive-aggressived to death by
silence for no reason you can discern.

To speed up the process, **we've got to make it easier for reviewers** -- for
instance, we should answer the fundamental question of whether they're even
supposed to run the code. The answer here is probably different for different
types of software, but **we all do reviews, maybe we should commit to having
review standards**.

* * *

<small>Thanks to [Brennen Bearnes](https://p1k3.com/) for reading an early draft of this post and making it less wronger.</small>
