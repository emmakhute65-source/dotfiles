#!/usr/bin/env python2

import errno
import glob
import os
import subprocess
import sys

import yaml

from PIL import Image

# Name of directory that contains ready-to-publish markdown
publish_dir = 'web'

# Name of metadata yaml file in each `publish_dir`
metadata_file = 'metadata.yaml'

# Where final site is built
site_dir = '_site'

# Options for raw to jpeg conversion
sizes = [640, 1280]
jpeg_quality = 92
convert_options = '-unsharp 2x0.5+0.7+0 -sigmoidal-contrast 3,50%'

possible_convert_cmds = ['convert']
convert_cmd = None


def is_jpeg(filename):
    try:
        i = Image.open(filename)
        return i.format == 'JPEG'
    except IOError:
        return False


def pictures_dir():
    return os.path.expanduser('~/Pictures')


def get_ready_subdirs():
    cmd = ['/usr/bin/find']
    cmd.append(pictures_dir())
    cmd += ['-type', 'f', '-name', metadata_file]
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    if p.returncode > 0:
        raise IOError(errno.ENOENT,
                      'Cannot find any folders matching:',
                      publish_dir)

    return out.strip().split('\n')


def convert_images(path):
    print 'Converting jpegs in {}'.format(path)
    current_dir = os.getcwd()
    os.chdir(path)
    try:
        os.mkdir(publish_dir)
    except OSError:
        pass
    for jpg in glob.glob('*.[jJ][pPeE][gG]'):
        input_file = os.path.join(path, jpg)
        output_file = os.path.join(path, publish_dir, jpg)

        if not is_jpeg(input_file):
            continue

        for size in sizes:
            cmd = convert_cmd.split()
            cmd.append('"' + input_file + '"')
            cmd += ['-resize', '{}x'.format(size)]
            cmd += ['-quality', str(jpeg_quality)]
            cmd += convert_options.split()
            cmd.append('"' + output_file + '"')
            print ' '.join(cmd)
            p = subprocess.Popen(' '.join(cmd),
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE,
                                 shell=True)
            out, err = p.communicate()
            if p.returncode > 0:
                print err
                raise RuntimeError('Could not convert %s at size %s',
                                   (input_file, size))

    os.chdir(current_dir)


def build_site():
    collections = get_ready_subdirs()
    for collection in collections:
        with open(collection, 'r') as m:
            metadata = yaml.load(m.read())

        convert_images(
            os.path.abspath(
                os.path.normpath(
                    os.path.expanduser(os.path.join(
                        os.path.dirname(collection), metadata['jpeg_path'])))))


def main():
    build_site()

if __name__ == '__main__':
    for cmd in possible_convert_cmds:
        has = subprocess.check_call('command -v {}'.format(cmd),
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    shell=True)
        if has == 0:
            convert_cmd = cmd
            if cmd == 'gm':
                convert_cmd = 'gm convert'
            break

    if convert_cmd is None:
        raise RuntimeError('Could not find ImageMagick, or GraphicsMagick')

    sys.exit(main())
