#!/usr/bin/env python2

import contextlib
import errno
import glob
import os
import shutil
import subprocess
import sys

import yaml

from PIL import Image

# Directory this script and the skel directory are in
script_dir = os.path.dirname(os.path.realpath(__file__))

# Name of directory that contains ready-to-publish markdown
publish_dir = 'web'

# Name of metadata yaml file in each `publish_dir`
metadata_file = 'metadata.yaml'

# Where final site is built
site_dir = '_site'

# What gets copied to the final site
skel_dir = 'skel'

# Options for raw to jpeg conversion
sizes = [320, 640]
jpeg_quality = 92
convert_options = '-unsharp 2x0.5+0.7+0 -sigmoidal-contrast 3,50%'

possible_convert_cmds = ['convert']
convert_cmd = None

page_head = """\
<!doctype html>
<html>
<head>
    <link href='https://fonts.googleapis.com/css?family=Merriweather:300,300italic|Open+Sans:600&subset=latin,latin-ext' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" type="text/css" href="main.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
</head>
<body>
<main>
"""

page_foot = """
    </main>
    <script src="main.js"></script>
</body>
</html>
"""

pages = []


@contextlib.contextmanager
def cd(path):
    """Context manger. cds to path, cds back at end of context

    :param path: path into which context should change
    """
    old_path = os.getcwd()
    try:
        os.chdir(path)
        yield
    finally:
        os.chdir(old_path)


def is_jpeg(filename):
    try:
        i = Image.open(filename)
        return i.format == 'JPEG'
    except IOError:
        return False


def pictures_dir():
    return os.path.expanduser('~/Pictures')


def get_ready_subdirs():
    cmd = ['/usr/bin/find']
    cmd.append(pictures_dir())
    cmd += ['-type', 'f', '-name', metadata_file]
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    if p.returncode > 0:
        raise IOError(errno.ENOENT,
                      'Cannot find any folders matching:',
                      publish_dir)

    return out.strip().split('\n')


def build_html(path, metadata, jpgs):
    with cd(path):
        title = metadata.get('title')
        subtitle = metadata.get('subtitle')
        cover = metadata.get('cover_image')
        with open('index.html', 'w') as f:
            f.write(page_head)
            f.write('<div class="cover"')
            if cover is not None:
                f.write((' style="background-image: url({});"').format(cover))
            f.write('><div class="inside-cover">')
            if title is not None:
                f.write('<h1>{}</h1>'.format(title))
            if subtitle is not None:
                f.write('<h2>{}</h2>'.format(subtitle))
            f.write('</div></div><div class="images">')  # end cover
            for jpg in jpgs:
                f.write(('<a class="img" style="width: {}px; '
                         'height: {}px; background-image: url({});" '
                         'href="{}">\n').format(
                    jpg['width'],
                    jpg['height'],
                    jpg['filename'],
                    jpg['filename']
                ))
                f.write('<p class="caption">{}</p>'.format(
                    os.path.splitext(
                        os.path.basename(jpg['filename']))[0]))
                f.write('</a>')  # end image
            f.write('</div>')  # end images
            f.write(page_foot)


def convert_images(path):
    print 'Converting jpegs in {}'.format(path)
    with cd(path):
        try:
            os.mkdir(publish_dir)
        except OSError:
            pass

        jpgs = {}

        for jpg in glob.glob('*.[jJ][pPeE][gG]'):
            input_file = os.path.join(path, jpg)
            output_file = os.path.join(path, publish_dir, jpg)

            if not is_jpeg(input_file):
                continue

            for size in sizes:
                cmd = convert_cmd.split()
                cmd.append('"' + input_file + '"')
                cmd += ['-resize', 'x{}'.format(size)]
                cmd += ['-quality', str(jpeg_quality)]
                cmd += convert_options.split()
                cmd.append('"' + output_file + '"')
                # print ' '.join(cmd)
                p = subprocess.Popen(' '.join(cmd),
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE,
                                     shell=True)
                out, err = p.communicate()
                if p.returncode > 0:
                    print err
                    raise RuntimeError('Could not convert %s at size %s',
                                       (input_file, size))
                i = Image.open(output_file)
                width, height = i.size
                base, ext = os.path.splitext(os.path.basename(jpg))
                new_filename = '{}__{}{}'.format(
                    base, height, ext)
                new_name = os.path.join(path, publish_dir, new_filename)
                jpgs.setdefault(size, [])
                jpgs[size].append({
                    'filename': new_filename,
                    'width': width,
                    'height': height,
                })
                os.rename(output_file, new_name)

    return jpgs


def copy_skel(path):
    skel = os.path.join(script_dir, 'skel')
    with cd(skel):
        for asset in glob.glob('*.js'):
            shutil.copyfile(asset, os.path.join(path, os.path.basename(asset)))

        for asset in glob.glob('*.css'):
            shutil.copyfile(asset, os.path.join(path, os.path.basename(asset)))


def build_pages():
    collections = get_ready_subdirs()
    for collection in collections:
        jpgs = []
        with open(collection, 'r') as m:
            metadata = yaml.load(m.read())

            collection_path = os.path.abspath(
                os.path.normpath(
                    os.path.expanduser(os.path.join(
                        os.path.dirname(collection), metadata['jpeg_path']))))

            new_jpgs = convert_images(collection_path)
            print new_jpgs

            if metadata.get('cover_image'):
                # TODO remove cover image
                # new_jpgs[sizes[0]]
                pass

            jpgs.append(new_jpgs)
            build_html(
                os.path.join(collection_path, publish_dir), metadata, new_jpgs[sizes[0]])
            web_path = os.path.join(collection_path, publish_dir)
            metadata['web_path'] = web_path
            copy_skel(web_path)
            pages.append(metadata)


def build_index():
    print pages
    pass


def main():
    build_pages()
    build_index()

if __name__ == '__main__':
    for cmd in possible_convert_cmds:
        has = subprocess.check_call('command -v {}'.format(cmd),
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    shell=True)
        if has == 0:
            convert_cmd = cmd
            if cmd == 'gm':
                convert_cmd = 'gm convert'
            break

    if convert_cmd is None:
        raise RuntimeError('Could not find ImageMagick, or GraphicsMagick')

    sys.exit(main())
