#!/usr/bin/env python
# Make archive posts easier

import argparse
import os
import re

from datetime import date

BASE_PATH = os.path.join(
    os.environ['HOME'], '.dotfiles', 'src', 'blog', 'blog')

CONTENT = '''[[!if test="enabled(calendar)" then="""
To see posts by date, check out the [[archives]]
"""]]
[[!inline pages="page({page_spec}) and !*Discussion"
  archive=yes limit=10 quick=yes trail=no]]
'''

FRONTMATTER = '''[[!meta date="{date}"]]
[[!meta author="Tyler Cipriani"]]
[[!meta copyright="""
Copyright &copy; {year} Tyler Cipriani
"""]]
[[!meta title="{title}"]]
[[!tag computing]]
'''


def make_path(args):
    year, month, day = args['year'], args['month'], args['day']
    times = {
        'year': {
            'dir': os.path.join(BASE_PATH, year),
            'pagespec': './{}/*/*/*',
        },
        'month': {
            'dir': os.path.join(BASE_PATH, year, month),
            'pagespec': './{}/*/*',
        },
        'day': {
            'dir': os.path.join(BASE_PATH, year, month, day),
            'pagespec': './{}/*',
        },
    }

    for pagetime in times.keys():
        data = times[pagetime]

        if not os.path.exists(data['dir']):
            os.makedirs(data['dir'])

        datadir = os.path.dirname(data['dir'])
        database = os.path.basename(data['dir'])
        datapage = os.path.join(datadir, '{}.mdwn'.format(database))

        if os.path.exists(datapage):
            continue

        with open(datapage, 'w') as f:
            f.write(CONTENT.format(
                page_spec=data['pagespec'].format(args[pagetime])))


def make_safe_title(title):
    dashed_title = '-'.join([re.sub(r'[^-\w]', '-', x.lower()) for x in title])
    return '{}.mdwn'.format(dashed_title)


def make_post(args):
    year, month, day = args['year'], args['month'], args['day']

    post_date = date(int(year), int(month), int(day)).isoformat()

    safe_title = make_safe_title(args['title'])
    title = ' '.join(args['title'])

    post_path = os.path.join(BASE_PATH, year, month, day, safe_title)
    if os.path.exists(post_path):
        raise Exception('Post path exists: %s', post_path)

    with open(post_path, 'w') as f:
        f.write(FRONTMATTER.format(year=year, date=post_date, title=title))

    print post_path


def parse_args():
    ap = argparse.ArgumentParser()
    ap.add_argument('-y', '--year', help='year of post')
    ap.add_argument('-m', '--month', help='2 digit month')
    ap.add_argument('-d', '--day', help='2 digit day')
    ap.add_argument('title', nargs='*', help='Post title')

    args = vars(ap.parse_args())
    today = date.today()

    if not args.get('year'):
        args['year'] = today.strftime('%Y')

    if not args.get('month'):
        args['month'] = today.strftime('%m')

    if not args.get('day'):
        args['day'] = today.strftime('%d')

    return args


def main():
    args = parse_args()
    make_path(args)
    make_post(args)


if __name__ == '__main__':
    main()
